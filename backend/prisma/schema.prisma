generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id          Int       @id @default(autoincrement())
  user_name        String    @db.VarChar(95)
  user_email       String    @unique @db.VarChar(65)
  contact          String?   @unique @db.VarChar(65)
  password         String    @db.VarChar(255)
  role             UserRole  @default(USER)
  
  // Municipality-specific fields (nullable for regular users)
  municipality     String?   @db.VarChar(100)
  wardNumber       Int?
  
  // Profile images
  profilePicture   String?   @db.VarChar(255)
  citizenshipPhoto String?   @db.VarChar(255)
  
  // Verification fields
  otp              String?
  otp_expiry       DateTime?
  isVerified       Boolean?  @default(false)
  isActive         Boolean   @default(true)
  
  // Relations
  reports          reports[]
  suggestions      Suggestion[]
  comments         Comment[]
  upvotes          Upvote[]  // Tracks user upvotes

  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model reports {
  report_id     Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  description   String   @db.Text
  photo         String?  @db.VarChar(255) // Store image URL
  municipality  String   @db.VarChar(100)
  wardNumber    Int
  latitude      Float
  longitude     Float
  createdAt     DateTime @default(now())
  user_id       Int
  user          users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade) 
}

// Enum for user roles
enum UserRole {
  USER
  MUNICIPALITY
  ADMIN
}

model Suggestion {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(255)
  description      String    @db.Text
  status           Status    @default(Pending)
  municipality     String    @db.VarChar(100)
  wardNumber       Int

  // Relationships
  userId           Int
  user             users     @relation(fields: [userId], references: [user_id])
  upvotes          Upvote[]  // Tracks upvotes

  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  comments         Comment[]
}

model Comment {
  id               Int       @id @default(autoincrement())
  text             String    @db.Text
  
  // Relationships
  suggestionId     Int
  suggestion       Suggestion @relation(fields: [suggestionId], references: [id])
  userId           Int
  user             users     @relation(fields: [userId], references: [user_id])
  
  // Timestamps
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Upvote {
  id           Int       @id @default(autoincrement())
  userId       Int
  suggestionId Int
  createdAt    DateTime  @default(now())

  // Relations
  user        users      @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  suggestion  Suggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  // Ensure a user can only upvote a suggestion once
  @@unique([userId, suggestionId])
}

enum Status {
  Pending
  IN_PROGRESS
  APPROVED
  REJECTED
}
